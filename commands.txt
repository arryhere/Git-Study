
$ git config --global init.defaultBranch main                               //set default branch [name]

------------------------------------------------------------------------------------------------------------------------------------------------

$ git config --global user.name "Arijit"                                    //set name
$ git config --global user.email "arijitdasofficial@gmail.com"              //set email
$ git config user.name                                                      //see name
$ git config user.email                                                     //see email
$ git config --list                                                         //see details
(END) -> q (quit)

$ git status
$ git init                                                                  //initialize a git
$ git add --a / $ git add -A / $ git add .                                  //staging files
$ git commit -m "initial commit"                                            //commit files
$ git log                                                                   //log files

$ rm -rf .git                                                               //force remove dir

$ git clone [https://github.com/tensorflow/tensorflow.git] [folder-name]    //clone remote-repo locally

$ git diff                                                                  //staging <==> working
$ git diff --staged                                                         //previous commit <==> staging

$ git commit -a -m "comment"                                                //tracked files -> commit (staging included)

$ git rm [file-name]                                                        //remove file -> no need to stage later(already staged)
$ git mv [file-name] [new-file-name]                                        //rename file -> no need to stage later(already staged)
$ git rm --cached [file-name]                                               //unstage a file -- explicitely mentioning .gitignore later to stop tracking the file
$ git remote rm origin                                                      //remove origin

$ git log -p                                                                //see changes in commit
$ git log -p -3                                                             //see changes in last [n] commits
$ git log --stat                                                            //see stats of commit
$ git log --stat -1                                                         //see stats of last [n] commits
$ git log --pretty=oneline                                                  //see changes in one-line
$ git log --pretty=short                                                    //see changes in shorthand
$ git log --pretty=full
$ git log --since=2.days
$ git log --pretty=format:"%h -- %an"                                       //format output
$ git log --pretty=format:"%H -- %ae"

$ git restore --staged [file-name]                                          //unstage a file
$ git restore [file-name]                                                   //restore previous version of the file (previous commit version)
$ git checkout -- [file-name]                                               //restore previous version of the file (previous commit version)
$ git checkout -f                                                           //restore all files to previous commit

------------------------------------------------------------------------------------------------------------------------------------------------

$ git remote add origin https:(url)                                         //link remote-repo to local-repo
$ git remote                                                                //remote-repo name
$ git remote -v                                                             //remote-repo details
$ git push -u origin master                                                 //push to remote-repo and set default upstream
$ git branch -M main                                                        //force rename branch to [---]
$ git branch -m master main                                                 //rename branch [---] to [---]
$ git branch                                                                //see branches

------------------------------------------------------------------------------------------------------------------------------------------------

$ git config --global alias.st status                                       //set alias -- git status => git st

------------------------------------------------------------------------------------------------------------------------------------------------

$ git checkout -b [name]                                                    //create new branch -> switch to it
$ git checkout main                                                         //switch to branch
$ git branch                                                                //see local branches
$ git branch -r                                                             //see remote branches
$ git branch -a                                                             //remote branch + local branch
$ git branch -av                                                            //remote branch + local branch + commits
$ git checkout [commit_hash_code]                                           //check out a particular commit -- After moving to that code, if you want to work on it and make changes, you should make another branch with git checkout -b <new-branch-name>, otherwise, the changes will not be retained.

------------------------------------------------------------------------------------------------------------------------------------------------

$ git branch --delete [branch]                                              //Deleting a local branch
$ git branch -d [branch]

$ git push origin --delete [branch]                                         //Deleting a remote branch
$ git push origin -d [branch] 

$ git branch --delete --remotes [remote]/[branch]                           //Deleting a local remote-tracking branch
$ git branch -dr [remote]/[branch]

------------------------------------------------------------------------------------------------------------------------------------------------

Cloning a repo from someone else's Github and pushing it to a repo on my Github
[https://stackoverflow.com/questions/18200248/cloning-a-repo-from-someone-elses-github-and-pushing-it-to-a-repo-on-my-github]

$ git remote set-url origin [url]                                           //change the remote-repo link
$ git remote rename origin upstream                                         //change [origin] -> [upstream]

------------------------------------------------------------------------------------------------------------------------------------------------

$ git merge [branch]                                                        //merge [branch] to current branch
$ git rebase [branch]                                                       //take the changes from [branch] and append them to main without a merge commit.
$ git branch --merged                                                       //show merged branched
$ git branch --no-merged                                                    //show unmerged branches

------------------------------------------------------------------------------------------------------------------------------------------------

$ git rm -r --cached <path>
